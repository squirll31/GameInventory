//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GameInventory
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class GameInventoryDBEntities : DbContext
    {
        public GameInventoryDBEntities()
            : base("name=GameInventoryDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<CompanyRelationship> CompanyRelationships { get; set; }
        public virtual DbSet<CompanyRelationshipType> CompanyRelationshipTypes { get; set; }
        public virtual DbSet<GameCompany> GameCompanies { get; set; }
        public virtual DbSet<GameOwner> GameOwners { get; set; }
        public virtual DbSet<GameRegion> GameRegions { get; set; }
        public virtual DbSet<Game> Games { get; set; }
        public virtual DbSet<GamesForGameDevView> GamesForGameDevViews { get; set; }
        public virtual DbSet<GamesForGamePubView> GamesForGamePubViews { get; set; }
        public virtual DbSet<Platform> Platforms { get; set; }
        public virtual DbSet<RecentGame> RecentGames { get; set; }
        public virtual DbSet<RecentGamesView> RecentGamesViews { get; set; }
    
        public virtual ObjectResult<Games_SelectAllByPlatform_Result> Games_SelectAllByPlatform(Nullable<int> platformId)
        {
            var platformIdParameter = platformId.HasValue ?
                new ObjectParameter("platformId", platformId) :
                new ObjectParameter("platformId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Games_SelectAllByPlatform_Result>("Games_SelectAllByPlatform", platformIdParameter);
        }
    
        public virtual ObjectResult<Games_SelectAllForDeveloper_Result> Games_SelectAllForDeveloper(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Games_SelectAllForDeveloper_Result>("Games_SelectAllForDeveloper", companyIdParameter);
        }
    
        public virtual ObjectResult<Games_SelectAllForPublisher_Result> Games_SelectAllForPublisher(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Games_SelectAllForPublisher_Result>("Games_SelectAllForPublisher", companyIdParameter);
        }
    }
}
